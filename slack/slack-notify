#!/bin/bash
# ---------------------------------------------------
#  Send notification to a Slack account thru a bot 
#  Configuration is stored in /etc/slack-notify.conf
#  Depends on curl 
#
#  Created by: @jmadrigal
# ---------------------------------------------------

# initialise variables
NOTIFY_TEXT=""
DISPLAY_TEXT=""
DISPLAY_PICT=""
DISPLAY_ICON=""
DISPLAY_MODE="markdown"
DISPLAY_SILENT="false"

# Configuration file
FILE_CONF="/etc/slack-notify.conf"

# -------------------------------------------------------
#   Check tools availability
# -------------------------------------------------------

command -v curl >/dev/null 2>&1 || { echo "[Error] Please install curl"; exit 1; }

# -------------------------------------------------------
#   Loop to load arguments
# -------------------------------------------------------

# if no argument, display help
if [ $# -eq 0 ] 
then
  echo "Tool to send a message to a Slack User or Channel."
  echo "Message is sent from a Slack Bot and can contain icon, text, image and/or document."
  echo "Main parameters are :"
  echo "  --text <text>       Text of the message or file with the text (use - for piped text)"
  echo "Options are :"
  echo "  --config <file>     use alternate config file, instead of default ${FILE_CONF}"
  echo "  --user <username>   Recipient User or Channel ID (replaces username= in ${FILE_CONF})"
  echo "  --token <token>     Token of your Slack bot (replaces token= in ${FILE_CONF})"
  echo "  --send-to           @username or #channel"
  echo "Optionnal icons are :"
  echo "  --success           Add a success icon markdown code"
  echo "  --warning           Add a warning icon markdown code"
  echo "  --error             Add an error icon markdown code"
  echo "Here is an example of piped text :"
  echo "  echo 'text to be displayed' | slack-notify --send-to #test-channel --success --text -"
  exit
fi

# loop to retrieve arguments
while test $# -gt 0
do
  case "$1" in
    "--text") shift; DISPLAY_TEXT="$1"; shift; ;;
    "--user") shift; USER_ID="$1"; shift; ;;
    "--send-to") shift; SEND_TO="$1"; shift; ;;
    "--token") shift; TOKEN="$1"; shift; ;;
    "--success") DISPLAY_ICON=":heavy_check_mark:"; shift; ;;
    "--warning") DISPLAY_ICON=":warning:"; shift; ;;
    "--error") DISPLAY_ICON=":x:"; shift; ;;
    *) shift; ;;
  esac
done

# -------------------------------------------------------
#   Read configuration
# -------------------------------------------------------

# if configuration file is present
if [ -f "${FILE_CONF}" ]
then
    # display
    echo "[Info] Using configuration file ${FILE_CONF}"

    # if needed, load from configuration file
    [ "${TOKEN}" = "" ] && TOKEN=$(cat "${FILE_CONF}" | grep -i "token=" | cut -d'=' -f2)
    [ "${USER_ID}" = "" ] && USER_ID=$(cat "${FILE_CONF}" | grep -i "user=" | cut -d'=' -f2)

    # load socks proxy from configuration file
    SOCKS_PROXY=$(cat "${FILE_CONF}" | grep "socks-proxy=" | cut -d'=' -f2)
else
    # display
    echo "[Warning] Configuration file missing ${FILE_CONF}"
fi

# check API key and User ID
[ "${TOKEN}" = "" ] && { echo "[Error] Please provide TOKEN or set it in ${FILE_CONF}"; exit 1; }
[ "${USER_ID}" = "" ] && { echo "[Error] Please provide USER or set it in ${FILE_CONF}"; exit 1; }

# -------------------------------------------------------
#   String preparation : space and line break
# -------------------------------------------------------

# if text is to be read from pipe, get it
[ ! -t 0 -a "${DISPLAY_TEXT}" = "-" ] && DISPLAY_TEXT=$(cat)

# if text is a file, get its content
[ -f "${DISPLAY_TEXT}" ] && DISPLAY_TEXT=$(cat "${DISPLAY_TEXT}")

# convert \n to LF
DISPLAY_TEXT=$(echo "${DISPLAY_TEXT}" | sed 's:\\n:\n:g')

# if icon defined, include ahead of notification
[ "${DISPLAY_ICON}" != "" ] && NOTIFY_TEXT="${DISPLAY_ICON} "

# if text defined, replace \n by HTML line break
[ "${DISPLAY_TEXT}" != "" ] && NOTIFY_TEXT="${NOTIFY_TEXT}${DISPLAY_TEXT}"

# -------------------------------------------------------
#   Notification
# -------------------------------------------------------
# default option
ARR_OPTIONS=( "--silent" "--insecure" )

# -------------------------------------------------------
#   Send Notification
# -------------------------------------------------------

CURL_RESULT=$(curl ${ARR_OPTIONS[@]} --request POST \
  --url https://slack.com/api/chat.postMessage \
  --header 'Cache-Control: no-cache' \
  --form token=${TOKEN} \
  --form "channel=${SEND_TO}" \
  --form "text=${NOTIFY_TEXT}" \
  --form "username=${USER_ID}" \
  --form icon_url=https://cdn2.iconfinder.com/data/icons/communication-glyph-1/64/Contact_Communication_Message_Talk-41-512.png)

# check curl request result
echo ${CURL_RESULT} | grep '"ok":true' > /dev/null || { echo ${CURL_RESULT}; exit 1; }

# end
exit 0
